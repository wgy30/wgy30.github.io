[{"title":"","date":"2020-08-07T06:38:44.199Z","path":"2020/08/07/线性表的顺序存储——静态分配方式实现（完整）/","text":"@TOC 说明：实现采用 C++ 实现，所列目录均已完全实现。在实现过程中，使用到了引用符号 &amp; ，通过对表的引用进行操作以及数组传参的知识。 本次操作是考研复习数据结构的一次复习，若有不足之处，欢迎指正。 1. 初始化说明：通过对线性表结构的初始化实现一个数据结构。同时，对结构里的空间赋值为0，避免产生脏数据。 2. 创建线性表说明：将数据作为参数进行传递，实现数据入表。因为初始建表时，未知表长。因此将一并将表长length作为参数传递。 3. 插入操作说明：i，为插入位置，e，为插入值。通过循环找到 i 的位置，将 e 插入，同时，i之后的所有数都要往后移，且length+1。 4. 删除操作说明：将参数 i 作为删除位置传递，并通过e返回删除值.然后 i 之后的值都往前移，且length-1。 5. 按值查找说明：通过输入的 e 的值作为参数，进入表中查找该数是否存在。若是，返回其位置下标，若不是，返回 -1 。 6. 按位查找说明：将 i 的输入作为查找位置，再用 e 返回其位置相对应的数。否则返回 -1 。 7. 打印线性表说明：设置一个 flag 标志，通过该标志判断当前表的状态，并将其打印出来。 8. 主函数操作说明：主函数中很大一部分封装在不同方法中使用，由于时间原因，暂时就这样吧（代码有点长了，可阅读性不太好）。","comments":true,"tags":[]},{"title":"404 Not Found：该页无法显示","date":"2019-07-26T13:51:29.000Z","path":"/404.html","text":"404","comments":true,"tags":[]}]